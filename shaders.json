{"background.frag":"#version 300 es\nprecision mediump float;in vec2 vUV;uniform sampler2D uTexture;out vec4 outputColor;void main(void) {outputColor = texture(uTexture, vUV);}","background.vert":"#version 300 es\nprecision mediump float;in vec2 aPosition;uniform mat3 uInvTransform;out vec2 vUV;void main(void) {vec3 sc = vec3(2.0 * aPosition - vec2(1.0, 1.0), 1.0);gl_Position = vec4(sc, 1.0);vec3 wc = uInvTransform * sc;vUV = 0.08 * wc.xy;}","food.frag":"#version 300 es\nprecision mediump float;in vec2 vPos;flat in lowp vec3 vColor;in lowp float vOpacity;const vec3 centerColor = vec3(1.0, 1.0, 1.0);out vec4 outputColor;void main(void) {float d2 = dot(vPos, vPos);float alpha = clamp(1.0 - 1.5*(d2 - 0.333), 0.0, 1.0);alpha = alpha * alpha * vOpacity * vOpacity;vec3 color = mix(centerColor, vColor, 0.5 + 0.666 * d2);outputColor = vec4(color, alpha);}","food.vert":"#version 300 es\nprecision mediump float;in vec2 aPosition;in vec2 aLocalPos;in vec3 aWiggleParams;in int aColorIndex;in float aSize;uniform mat3 uTransform;uniform sampler2D uColorSampler;uniform vec2 uAttractorPosition;uniform float uTime;out vec2 vPos;flat out lowp vec3 vColor;out lowp float vOpacity;void main(void) {vPos = aLocalPos;vec2 worldPosition = aPosition + aSize * aLocalPos;vColor = texelFetch(uColorSampler, ivec2(aColorIndex, 1), 0).rgb;float d = distance(worldPosition, uAttractorPosition);float s = min(1.0, d * 0.25);float t0 = 10.0 * fract(0.23 * aPosition.x + 0.21 * aPosition.y);vec2 wiggle = 0.275 * s * vec2(cos(aWiggleParams.x * uTime + t0), sin(aWiggleParams.y * uTime + t0));vOpacity = min(1.0, d * 0.375);float ws = 1.0 + 0.11 * s * cos(1.75 * aWiggleParams.z * uTime + t0);vec2 pos = aPosition + ws * aSize * aLocalPos;pos = (d < 7.5) ? mix(pos, uAttractorPosition, 1.0 - s) : pos;gl_Position = vec4(uTransform * vec3(pos + wiggle, 1.0), 1.0);}","head.frag":"#version 300 es\nprecision mediump float;uniform sampler2D uColorSampler;uniform lowp int uSkin;uniform lowp float uSnakeFast;const vec4 fastColorBoost = vec4(0.175, 0.175, 0.175, 0.0);out vec4 outputColor;void main(void) {vec4 skinColor = texelFetch(uColorSampler, ivec2(uSkin, 0), 0);outputColor = skinColor + uSnakeFast * fastColorBoost;}","head.vert":"#version 300 es\nprecision mediump float;in vec2 vRelPosition;uniform mat3 uTransform;uniform float uSnakeWidth;uniform vec2 uHeadPosition;uniform float uHeadRotation;void main(void) {float c = cos(uHeadRotation);float s = sin(uHeadRotation);mat2 rotate = mat2(c,s,-s,c);float size = 0.5 * uSnakeWidth;vec2 position = uHeadPosition + size * rotate * vRelPosition;gl_Position = vec4(uTransform * vec3(position, 1.0), 1.0);}","heatmap.frag":"#version 300 es\nprecision mediump float;uniform vec2 uCameraPosition;uniform sampler2D uHeatMapTexture1;uniform sampler2D uHeatMapTexture2;uniform float uTextureMix;in vec2 vPosition;const float MARKER_SIZE = 0.015;const vec4 MARKER_COLOR = vec4(1.0, 1.0, 1.0, 1.0);const vec4 COOL_COLOR = vec4(0.4, 0.4, 0.4, 0.5);out vec4 outputColor;void main(void) {vec2 ed = 2.0 * (vec2(0.5, 0.5) - abs(vPosition - vec2(0.5, 0.5)));float med = min(ed.x, ed.y);float alpha = min(8.0 * med, 1.0);float heat = mix(\n\t\ttexture(uHeatMapTexture1, vPosition).r,\n\t\ttexture(uHeatMapTexture2, vPosition).r,\n\t\tuTextureMix\n\t);vec4 hotColor = vec4(1.0, 0.4 * heat, max(0.0, 0.5 * heat - 0.4), 1.0);vec4 color = mix(COOL_COLOR, hotColor, 1.3 * heat);color.a *= alpha;float d = distance(vPosition, uCameraPosition);outputColor = d <= MARKER_SIZE ? MARKER_COLOR : color;}","heatmap.vert":"#version 300 es\nprecision mediump float;in vec2 aRelPosition;uniform mat3 uTransform;out vec2 vPosition;void main(void) {vPosition = aRelPosition;gl_Position = vec4(uTransform * vec3(aRelPosition, 1.0), 1.0);}","snake.frag":"#version 300 es\nprecision mediump float;uniform sampler2D uColorSampler;uniform sampler2D uScalesTexture;uniform lowp int uSkin;uniform highp float uSnakeLength;uniform lowp float uSnakeFast;uniform highp float uSnakeMaxWidth;in float vPathOffset;in float vNormalOffset;flat in float vInvTexScale;const vec3 darkGrey = 0.05 * vec3(1.0, 1.0, 1.0);const vec3 fastColorBoost = 0.175 * vec3(1.0, 1.0, 1.0);out vec4 outputColor;void main(void) {vec3 skinColor = texelFetch(uColorSampler, ivec2(uSkin, 0), 0).rgb;vec3 darkColor = mix(skinColor, darkGrey, 0.64);float dX = vNormalOffset + 0.42 * sign(vNormalOffset) * vNormalOffset * vNormalOffset;vec2 uv = vInvTexScale * vec2(dX * uSnakeMaxWidth, 1.25 * vPathOffset);vec3 texData = texture(uScalesTexture, uv).rgb;skinColor = skinColor + uSnakeFast * fastColorBoost;skinColor = (0.2 + 0.8 * texData.r) * skinColor;skinColor = skinColor + 0.8 * (1.0 - abs(vNormalOffset)) * texData.b;float co = vNormalOffset * vNormalOffset;vec3 color = mix(skinColor, darkColor, co);outputColor = vec4(color, vPathOffset < uSnakeLength ? 1.0 : 0.0);}","snake.vert":"#version 300 es\nprecision mediump float;in vec2 aPosition;in vec2 aNormal;in float aNormalOffset;in float aRelativePathOffset;uniform mat3 uTransform;uniform highp float uSnakeMaxWidth;uniform highp float uChunkPathOffset;uniform highp float uSnakeLength;uniform highp float uSnakeThinningStart;out highp float vPathOffset;out float vNormalOffset;flat out float vInvTexScale;void main(void) {vNormalOffset = aNormalOffset;vPathOffset = uChunkPathOffset + aRelativePathOffset;float t = min(1.0, max(0.0, vPathOffset - uSnakeThinningStart) / (uSnakeLength - uSnakeThinningStart));float u = (aRelativePathOffset < 0.0) ? 0.9 : 1.0 - (t * t * t);vInvTexScale = 0.7928 - uSnakeMaxWidth * 0.0428;float size = 0.5 * u * uSnakeMaxWidth;vec2 position = aPosition + (aNormalOffset * size) * aNormal;gl_Position = vec4(uTransform * vec3(position, 1.0), 1.0);}","solidcolor.frag":"#version 300 es\nprecision mediump float;uniform lowp vec4 uColor;out vec4 outputColor;void main(void) {outputColor = uColor;}","solidcolor.vert":"#version 300 es\nprecision mediump float;in vec2 vPosition;uniform mediump mat3 uTransform;void main(void) {gl_Position = vec4(uTransform * vec3(vPosition, 1.0), 1.0);}"}