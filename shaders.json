{"food.frag":"precision mediump float;varying vec2 varPos;varying lowp vec3 vColor;varying lowp float vOpacity;const vec3 centerColor = vec3(1.0, 1.0, 1.0);float norm_clamp(float x) {return min(1.0, max(0.0, x));}\n\nvoid main(void) {float d2 = dot(varPos, varPos);float alpha = norm_clamp(1.0 - 1.5*(d2 - 0.333));alpha = alpha * alpha * vOpacity * vOpacity;vec3 color = mix(centerColor, vColor, 0.5 + 0.666 * d2);gl_FragColor = vec4(color, alpha);}","food.vert":"precision mediump float;attribute vec2 aPosition;attribute vec2 aLocalPos;attribute float aColorIndex;uniform mat3 uTransform;uniform sampler2D uColorSampler;uniform vec2 uAttractorPosition;varying vec2 varPos;varying lowp vec3 vColor;varying lowp float vOpacity;const float cMoveDist = 7.5;void main(void) {varPos = aLocalPos;vColor = texture2D(uColorSampler, vec2(aColorIndex, 0.75)).rgb;float d = distance(aPosition, uAttractorPosition);float s = min(1.0, d * 0.25);vOpacity = min(1.0, d * 0.375);vec2 pos = (d < cMoveDist) ? mix(aPosition, uAttractorPosition, 1.0 - s) : aPosition;gl_Position = vec4(uTransform * vec3(pos, 1.0), 1.0);}","head.frag":"precision mediump float;uniform sampler2D uColorSampler;uniform lowp float uSkin;uniform lowp float uSnakeFast;const vec4 fastColorBoost = vec4(0.175, 0.175, 0.175, 0.0);void main(void) {vec4 skinColor = texture2D(uColorSampler, vec2(uSkin, 0.25));gl_FragColor = skinColor + uSnakeFast * fastColorBoost;}","head.vert":"precision mediump float;attribute vec2 vRelPosition;uniform mat3 uTransform;uniform float uSnakeWidth;uniform vec2 uHeadPosition;uniform float uHeadRotation;void main(void) {float c = cos(uHeadRotation);float s = sin(uHeadRotation);mat2 rotate = mat2(c,s,-s,c);float size = 0.5 * uSnakeWidth;vec2 position = uHeadPosition + size * rotate * vRelPosition;gl_Position = vec4(uTransform * vec3(position, 1.0), 1.0);}","heatmap.frag":"precision mediump float;uniform vec2 uCameraPosition;uniform sampler2D uHeatMapTexture1;uniform sampler2D uHeatMapTexture2;uniform float uTextureMix;varying vec2 vPosition;const float MARKER_SIZE = 0.015;const vec4 MARKER_COLOR = vec4(1.0, 1.0, 1.0, 1.0);const vec4 COOL_COLOR = vec4(0.4, 0.4, 0.4, 0.5);void main(void) {vec2 ed = 2.0 * (vec2(0.5, 0.5) - abs(vPosition - vec2(0.5, 0.5)));float med = min(ed.x, ed.y);float alpha = min(8.0 * med, 1.0);float heat = mix(\n\t\ttexture2D(uHeatMapTexture1, vPosition).r,\n\t\ttexture2D(uHeatMapTexture2, vPosition).r,\n\t\tuTextureMix\n\t);vec4 hotColor = vec4(1.0, 0.4 * heat, max(0.0, 0.5 * heat - 0.4), 1.0);vec4 color = mix(COOL_COLOR, hotColor, 1.3 * heat);color.a *= alpha;float d = distance(vPosition, uCameraPosition);gl_FragColor = d <= MARKER_SIZE ? MARKER_COLOR : color;}","heatmap.vert":"precision mediump float;attribute vec2 aRelPosition;uniform mat3 uTransform;varying vec2 vPosition;void main(void) {vPosition = aRelPosition;gl_Position = vec4(uTransform * vec3(aRelPosition, 1.0), 1.0);}","snake.frag":"precision mediump float;uniform sampler2D uColorSampler;uniform lowp float uSkin;uniform highp float uSnakeLength;uniform lowp float uSnakeFast;varying float vPathOffset;varying float vNormalOffset;const vec3 darkGrey = vec3(0.1, 0.1, 0.1);const vec3 fastColorBoost = vec3(0.175, 0.175, 0.175);void main(void) {vec3 skinColor = texture2D(uColorSampler, vec2(uSkin, 0.25)).rgb;vec3 darkColor = mix(skinColor, darkGrey, 0.5);float co = abs(vNormalOffset);co = co * co;co = co * (1.0 + 0.25*sin(2.0*vPathOffset));vec3 color = mix(skinColor + uSnakeFast * fastColorBoost, darkColor, co);gl_FragColor = vec4(color, vPathOffset < uSnakeLength ? 1.0 : 0.0);}","snake.vert":"precision mediump float;attribute vec2 aPosition;attribute vec2 aNormal;attribute float aNormalOffset;attribute float aRelativePathOffset;uniform mat3 uTransform;uniform highp float uSnakeMaxWidth;uniform highp float uChunkPathOffset;uniform highp float uSnakeLength;uniform highp float uSnakeThinningStart;varying highp float vPathOffset;varying float vNormalOffset;void main(void) {vNormalOffset = aNormalOffset;vPathOffset = uChunkPathOffset + aRelativePathOffset;float t = min(1.0, max(0.0, vPathOffset - uSnakeThinningStart) / (uSnakeLength - uSnakeThinningStart));float u = (aRelativePathOffset < 0.0) ? 0.9 : 1.0 - (t * t * t);float size = 0.5 * u * uSnakeMaxWidth;vec2 position = aPosition + (aNormalOffset * size) * aNormal;gl_Position = vec4(uTransform * vec3(position, 1.0), 1.0);}","solidcolor.frag":"uniform lowp vec4 uColor;void main(void) {gl_FragColor = uColor;}","solidcolor.vert":"precision mediump float;attribute vec2 vPosition;uniform mediump mat3 uTransform;void main(void) {gl_Position = vec4(uTransform * vec3(vPosition, 1.0), 1.0);}"}