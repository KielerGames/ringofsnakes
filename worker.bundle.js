(()=>{"use strict";const e=Symbol("Comlink.proxy"),t=Symbol("Comlink.endpoint"),n=Symbol("Comlink.releaseProxy"),s=Symbol("Comlink.thrown"),a=e=>"object"==typeof e&&null!==e||"function"==typeof e,i=new Map([["proxy",{canHandle:t=>a(t)&&t[e],serialize(e){const{port1:t,port2:n}=new MessageChannel;return r(e,t),[n,[n]]},deserialize:e=>(e.start(),c(e,[],undefined))}],["throw",{canHandle:e=>a(e)&&s in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function r(t,n=self){n.addEventListener("message",(function a(i){if(!i||!i.data)return;const{id:h,type:c,path:u}=Object.assign({path:[]},i.data),d=(i.data.argumentList||[]).map(m);let p;try{const n=u.slice(0,-1).reduce(((e,t)=>e[t]),t),s=u.reduce(((e,t)=>e[t]),t);switch(c){case"GET":p=s;break;case"SET":n[u.slice(-1)[0]]=m(i.data.value),p=!0;break;case"APPLY":p=s.apply(n,d);break;case"CONSTRUCT":p=function(t){return Object.assign(t,{[e]:!0})}(new s(...d));break;case"ENDPOINT":{const{port1:e,port2:n}=new MessageChannel;r(t,n),p=l(e,[e])}break;case"RELEASE":p=void 0;break;default:return}}catch(e){p={value:e,[s]:0}}Promise.resolve(p).catch((e=>({value:e,[s]:0}))).then((e=>{const[t,s]=f(e);n.postMessage(Object.assign(Object.assign({},t),{id:h}),s),"RELEASE"===c&&(n.removeEventListener("message",a),o(n))}))})),n.start&&n.start()}function o(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function h(e){if(e)throw new Error("Proxy has been released and is not useable")}function c(e,s=[],a=function(){}){let i=!1;const r=new Proxy(a,{get(t,a){if(h(i),a===n)return()=>p(e,{type:"RELEASE",path:s.map((e=>e.toString()))}).then((()=>{o(e),i=!0}));if("then"===a){if(0===s.length)return{then:()=>r};const t=p(e,{type:"GET",path:s.map((e=>e.toString()))}).then(m);return t.then.bind(t)}return c(e,[...s,a])},set(t,n,a){h(i);const[r,o]=f(a);return p(e,{type:"SET",path:[...s,n].map((e=>e.toString())),value:r},o).then(m)},apply(n,a,r){h(i);const o=s[s.length-1];if(o===t)return p(e,{type:"ENDPOINT"}).then(m);if("bind"===o)return c(e,s.slice(0,-1));const[d,l]=u(r);return p(e,{type:"APPLY",path:s.map((e=>e.toString())),argumentList:d},l).then(m)},construct(t,n){h(i);const[a,r]=u(n);return p(e,{type:"CONSTRUCT",path:s.map((e=>e.toString())),argumentList:a},r).then(m)}});return r}function u(e){const t=e.map(f);return[t.map((e=>e[0])),(n=t.map((e=>e[1])),Array.prototype.concat.apply([],n))];var n}const d=new WeakMap;function l(e,t){return d.set(e,t),e}function f(e){for(const[t,n]of i)if(n.canHandle(e)){const[s,a]=n.serialize(e);return[{type:"HANDLER",name:t,value:s},a]}return[{type:"RAW",value:e},d.get(e)||[]]}function m(e){switch(e.type){case"HANDLER":return i.get(e.name).deserialize(e.value);case"RAW":return e.value}}function p(e,t,n){return new Promise((s=>{const a=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===a&&(e.removeEventListener("message",t),s(n.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:a},t),n)}))}const g=()=>{};class k{constructor(e){this.onclose=g,this.onJSONMessage=g,this.onBinaryMessage=g,this.websocket=e,this.websocket.onclose=e=>{const{code:t,reason:n,wasClean:s}=e;console.info("WebSocket closed",t,n,s),this.onclose()},this.websocket.onerror=()=>console.error("WebSocket error"),this.websocket.onmessage=e=>{const t=e.data;if(t instanceof ArrayBuffer)this.onBinaryMessage(t);else{const e=JSON.parse(t);this.onJSONMessage(e)}}}sendJSON(e){this.websocket.send(JSON.stringify(e))}sendBinary(e){this.websocket.send(e)}close(){this.websocket.readyState!==WebSocket.CLOSED&&this.websocket.close()}isOpen(){return this.websocket.readyState===WebSocket.OPEN}}function w(e,t,n){const s=new DataView(e,t,26),a=s.getUint8(5),i=(8,r=e=>0!=(a&1<<e),Array.from({length:8},((e,t)=>r(t))));var r;const o=s.getFloat32(6,!1),h=s.getFloat32(10,!1),c=s.getFloat32(14,!1);return{data:{id:s.getUint16(0,!1),headChunkId:s.getUint32(0,!1),skin:s.getUint8(4),fast:i[0],fastHistory:i,length:o,width:y(o,n),headDirection:[h,c],headPosition:{x:s.getFloat32(18,!1),y:s.getFloat32(22,!1)}},nextByteOffset:t+26}}function y(e,t){const n=t.snakes.minWidth,s=t.snakes.maxWidth-t.snakes.minWidth;var a;return n+2*(a=(e-t.snakes.minLength)/(1024-t.snakes.minLength)*3.66,1/(1+Math.exp(-a))-.5)*s}function b(e){if(!Number.isFinite(e))return 0;for(;Math.abs(e)>Math.PI;)e-=2*Math.sign(e)*Math.PI;return e}Math.PI;class x{constructor(e,t,n,s){this.minX=e,this.maxX=t,this.minY=n,this.maxY=s}static fromTransferable(e){return new x(e.minX,e.maxX,e.minY,e.maxY)}static createAt(e,t,n){const s=.5*t,a=.5*n;return new x(e.x-s,e.x+s,e.y-a,e.y+a)}static distance2(e,t){let n=0,s=0;return e.maxX<t.minX?n=t.minX-e.maxX:t.maxX<e.minX&&(n=e.minX-t.maxX),e.maxY<t.minY?s=t.minY-e.maxY:t.maxY<e.minY&&(s=e.minY-t.maxY),n*n+s*s}get width(){return this.maxX-this.minX}get height(){return this.maxY-this.minY}createTransferable(e=0){return{minX:this.minX-e,maxX:this.maxX+e,minY:this.minY-e,maxY:this.maxY+e}}extendTo(e,t=Number.EPSILON){return new x(Math.min(this.minX,e.x-t),Math.max(this.maxX,e.x+t),Math.min(this.minY,e.y-t),Math.max(this.maxY,e.y+t))}contains(e){const t=this.minX<=e.x&&e.x<this.maxX,n=this.minY<=e.y&&e.y<this.maxY;return t&&n}}class v{constructor(e,t){this.position=0,this.pathPoints=e,this.vertices=2*this.pathPoints,this.chunkPathLength=t,this.buffer=new Float32Array(6*this.vertices)}addPoint(e,t,n,s){this.checkCanAdd();const a=this.buffer;let i=this.position;this.position+=12;const r=n-.5*Math.PI,o=Math.cos(r),h=Math.sin(r),c=this.chunkPathLength-s;a[i+0]=e,a[i+1]=t,a[i+2]=o,a[i+3]=h,a[i+4]=1,a[i+5]=c,i+=6,a[i+0]=e,a[i+1]=t,a[i+2]=o,a[i+3]=h,a[i+4]=-1,a[i+5]=c}duplicateLastPoint(){this.checkCanAdd();const e=this.position,t=e-12;if(t<0)throw new Error("No point to duplicate.");this.position+=12;const n=this.buffer;for(let s=0;s<12;s++)n[e+s]=n[t+s]}checkCanAdd(){if(this.position>=this.buffer.length)throw new RangeError("Cannot add another point to vertex buffer.")}}function U(e,t,n){const s=new DataView(e,t);if(s.byteLength<21)throw new RangeError("Invalid buffer (too small for header)");const a=s.getUint16(0,!1),i=s.getUint32(0,!1),r=s.getUint8(4);let o=s.getFloat32(5,!1),h=s.getFloat32(9,!1),c=s.getFloat32(13,!1);const u=s.getFloat32(17,!1),d=21+r===96;if(!d&&0!==u)throw new Error(`Invalid chunk offset value: ${u}`);if(s.byteLength<21+r)throw new RangeError("Invalid buffer (too small)");const l=r+1,f=new Float32Array(4*l);let m,p,g,k,w=0;m=p=h,g=k=c,f[0]=h,f[1]=c,f[2]=w,f[3]=o;for(let e=0;e<r;e++){const t=s.getUint8(21+e),a=(128&t)>0,i=1+((112&t)>>4),r=S(n,15&t),u=o+.5*r;o=b(o+r);const d=i*(a?n.snakes.fastSpeed:n.snakes.speed);h+=d*Math.cos(o),c+=d*Math.sin(o),w+=d;const l=4*(e+1);f[l+0]=h,f[l+1]=c,f[l+2]=w,f[l+3]=u,m=Math.min(m,h),p=Math.max(p,h),g=Math.min(g,c),k=Math.max(k,c)}f[f.length-1]=o,w=Math.max(w,f[f.length-2]);const y=new v(l+1,w);for(let e=0;e<l;e++){const t=4*e;y.addPoint(f[t+0],f[t+1],f[t+3],f[t+2])}y.duplicateLastPoint();const U=new x(m,p,g,k);return{data:{id:i,snakeId:a,length:w,offset:u,full:d,vertices:y.vertices,data:y.buffer,boundingBox:U.createTransferable()},nextByteOffset:t+21+r}}function S(e,t){return(1-((1&t)<<1))*Math.floor(t/2)*e.snakes.maxTurnDelta/7}const E=[.64,1,1.5];function M(e,t,n){const s=new DataView(e,t),a=n.chunks.size,i=s.getUint8(0),r=s.getUint8(1),o=s.getUint16(2,!1),h=s.getUint16(0,!1),c=(i-.5*n.chunks.columns)*a,u=(r-.5*n.chunks.rows)*a,d=new Array(o);for(let e=0;e<o;e++){const t=4+3*e,n=s.getInt8(t+0)+128,i=s.getInt8(t+1)+128,r=s.getUint8(t+2),o=E[r>>6],h=63&r,l=c+n/256*a,f=u+i/256*a;d[e]={x:l,y:f,size:o,color:h}}return{data:{id:h,items:d,bounds:{minX:c,maxX:c+a,minY:u,maxY:u+a}},nextByteOffset:t+4+3*o}}function L(e,t,n,s,a){const i=new Array(n);for(let r=0;r<n;r++){const{data:n,nextByteOffset:o}=e(s,a,t);i[r]=n,a=o}return{data:i,nextByteOffset:a}}let C=null;const O=new class{constructor(e,t){this.lastRealUpdate=performance.now(),this.nextValue=null,this.timeout=void 0,this.minDelay=e,this.updateConsumer=t}setValue(e){if(void 0!==this.timeout)return void(this.nextValue=e);const t=performance.now(),n=t-this.lastRealUpdate;if(n>=this.minDelay)return this.lastRealUpdate=t,void this.updateConsumer(e);const s=this.minDelay-n;this.timeout=setTimeout((()=>{this.timeout=void 0,null!==this.nextValue&&(this.updateConsumer(this.nextValue),this.nextValue=null)}),s)}abort(){void 0!==this.timeout&&(clearTimeout(this.timeout),this.timeout=void 0)}}(1e3/30,(e=>{if(C&&C.isOpen()){const t=new ArrayBuffer(9),n=new DataView(t),s=x.fromTransferable(e.viewBox);n.setFloat32(0,s.width/s.height,!1),n.setFloat32(4,e.targetAlpha,!1),n.setUint8(8,e.wantsToBeFast?1:0),C.sendBinary(t)}})),N=new class{constructor(e){this.updateQueue=[],this.snakeNames=new Map,this.serverUpdateEventTrigger=e}init(e){this.config=e.gameConfig,this.snakeNames.set(e.snakeId,e.snakeName)}nextUpdate(){const e=this.updateQueue.shift(),t=this.updateQueue.length>0;return e&&e.snakes.forEach((e=>e.name=this.snakeNames.get(e.id))),{ticksSinceLastUpdate:0,snakes:[],snakeChunks:[],foodChunks:[],snakeDeaths:[],...e,moreUpdates:t}}addBinaryUpdate(e){const t=function(e,t){const n=new DataView(t),s=n.getUint8(0),a=n.getUint8(1),i=n.getUint8(2),r=n.getUint8(3),o=0!==n.getUint8(4),{data:h,nextByteOffset:c}=L(w,e,a,t,5),{data:u,nextByteOffset:d}=L(U,e,i,t,c),{data:l,nextByteOffset:f}=L(M,e,r,t,d);let m,p=f;if(o){const n=e.chunks.rows*e.chunks.columns;p+=n;const s=new Uint8Array(t,f,n);m=new Uint8Array(s)}return p!==t.byteLength&&console.error(`Unexpected update buffer size (expected ${p}, was ${t.byteLength})`),{ticksSinceLastUpdate:s,snakeInfos:h,snakeChunkData:u,foodChunkData:l,heatMap:m}}(this.config,e);t.ticksSinceLastUpdate<=0&&console.error(`Binary update not supported! ticks: ${t.ticksSinceLastUpdate}`);const n=this.updateQueue.length>0&&0===this.updateQueue[this.updateQueue.length-1].ticksSinceLastUpdate,s=n?this.updateQueue[this.updateQueue.length-1]:{ticksSinceLastUpdate:0,snakes:[],snakeChunks:[],foodChunks:[],snakeDeaths:[]};s.ticksSinceLastUpdate=t.ticksSinceLastUpdate,s.snakes.push(...t.snakeInfos),s.snakeChunks.push(...t.snakeChunkData),s.foodChunks.push(...t.foodChunkData),t.heatMap&&(s.heatMap=t.heatMap),n||this.updateQueue.push(s),this.duration>.5&&console.warn(`Update congestion! Current delay: ${this.duration.toFixed(2)}s`),this.triggerUpdateEvent()}addJSONUpdate(e){switch(e.tag){case"SnakeDeathInfo":console.info(`Snake ${e.snakeId} has died.`),this.addInformation({snakeDeaths:[e.snakeId]}),this.snakeNames.delete(e.snakeId),this.triggerUpdateEvent();break;case"GameStatistics":this.addInformation({leaderboard:(({tag:e,...t})=>t)(e)}),e.leaderboard.forEach((({id:e,name:t})=>this.snakeNames.set(e,t))),this.triggerUpdateEvent();break;case"SnakeNameUpdate":for(const[t,n]of Object.entries(e.names)){const e=parseInt(t,10);this.snakeNames.set(e,n)}break;default:throw new Error(`Unexpected message from server. (tag = ${e.tag})`)}}get duration(){return this.config.tickDuration*this.updateQueue.map((e=>e.ticksSinceLastUpdate)).reduce(((e,t)=>e+t),0)}addInformation(e){let t;0===this.updateQueue.length?(t={ticksSinceLastUpdate:0,snakes:[],snakeChunks:[],foodChunks:[],snakeDeaths:[]},this.updateQueue.push(t)):t=this.updateQueue[this.updateQueue.length-1],e.leaderboard&&(t.leaderboard=e.leaderboard),e.snakeDeaths&&t.snakeDeaths.push(...e.snakeDeaths)}triggerUpdateEvent(){this.serverUpdateEventTrigger&&this.serverUpdateEventTrigger()}}((()=>P("server-update"))),I=new Map;function P(e){const t=I.get(e);t&&t()}self.onerror=(e,t,n,s,a)=>{P("error")},r(new class{async init(e){if(null!==C)throw new Error("Worker is already initialized.");const t=`${e.server.wss?"wss":"ws"}://${e.server.host}:${e.server.port}/game`;C=await async function(e){const t=new WebSocket(e);return t.binaryType="arraybuffer",await new Promise(((e,n)=>{t.onopen=()=>{t.onopen=null,e()},t.onerror=()=>{t.onerror=null,n()}})),new k(t)}(t);const n=await new Promise(((e,t)=>{const n=setTimeout((()=>t(new Error("SpawnInfo timeout."))),2e3);C.onJSONMessage=t=>{"SpawnInfo"===t.tag?(clearTimeout(n),e(t)):console.warn("Game init: Unexpected message from server.",t)}}));return N.init(n),C.onJSONMessage=e=>{e.tag,N.addJSONUpdate(e)},C.onBinaryMessage=e=>{N.addBinaryUpdate(e)},C.onclose=()=>{P("disconnect"),self.close()},{config:N.config,targetSnakeId:n.snakeId,startPosition:n.snakePosition}}sendUserInput(e,t,n){O.setValue({targetAlpha:e,wantsToBeFast:t,viewBox:n})}getDataChanges(){const e=N.nextUpdate(),t=e.snakeChunks.map((e=>e.data.buffer));return e.heatMap&&t.push(e.heatMap.buffer),l(e,t)}quit(){C&&C.close(),self.close()}addEventListener(e,t){I.set(e,t)}})})();